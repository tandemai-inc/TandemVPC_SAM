AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cleanup S3 bucket


Parameters:
  S3Bucket:
    Type: String
    Description: "S3 Bucket"

Resources:
  CleanupS3bucketFunction:
    Type: AWS::Lambda::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Description: Lambda function that cleanup given S3 bucket
      Timeout: 120
      Role:
        Fn::GetAtt: [LambdaFunctionRole, Arn]
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse
          import logging
          import sys
          from botocore.config import Config
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def _delete_s3_artifacts(event):
              """
              Delete artifacts under the directory that is passed in.

              It exits gracefully if directory does not exist.
              :param bucket_name: bucket containing cluster artifacts
              """
              bucket_name = event["ResourceProperties"]["S3Bucket"]
              try:
                  if bucket_name != "NONE":
                      bucket = boto3.resource("s3", config=Config(retries={"max_attempts": 60})).Bucket(bucket_name)
                      logger.info("Cluster S3 artifact in %s deletion: STARTED", bucket_name)
                      bucket.objects.all().delete()
                      bucket.object_versions.delete()
                      logger.info("Cluster S3 artifact in %s deletion: COMPLETED", bucket_name)
              except boto3.client("s3").exceptions.NoSuchBucket as ex:
                  logger.warning("S3 bucket %s not found. Bucket was probably manually deleted.", bucket_name)
                  logger.warning(ex, exc_info=True)
              except Exception as e:
                  logger.error(
                      "Failed when deleting cluster S3 artifact in %s with error %s", bucket_name, e
                  )
                  raise

          def handler(event, context):
              try:
                  if event["RequestType"] == "Delete":
                      _delete_s3_artifacts(event)
                  response_status = cfnresponse.SUCCESS
                  reason = ""
              except Exception as e:
                  response_status = cfnresponse.FAILED
                  reason = str(e)
              cfnresponse.send(event, context, response_status, {}, event.get('PhysicalResourceId', 'CleanupS3bucketCustomResource'), reason)

  CleanupS3bucketCustomResource:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      S3Bucket: !Ref S3Bucket
      ServiceToken: !GetAtt CleanupS3bucketFunction.Arn

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: CanListAndDeleteObjectsInBucket
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*Object"
                  - "s3:ListBucket"
                  - "s3:ListBucketVersions"
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"