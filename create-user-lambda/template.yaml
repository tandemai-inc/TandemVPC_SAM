AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Create AD users and set up certificates

Parameters:
  AdminSecretArn:
    Type: String
    Description: Admin password Secret ARN
    NoEcho: true

  DomainCertificateSecretArn:
    Type: String
    Description: ARN for Domain Cert Secret
    NoEcho: true

  DomainPrivateKeySecretArn:
    Type: String
    Description: ARN for Domain Private Key Secret
    NoEcho: true

  DirectoryDomain:
    Type: String
    Description: Directory domain name

  DnsIp1:
    Type: String
    Description: First DNS IP address

  DnsIp2:
    Type: String
    Description: Second DNS IP address

  DirectoryId:
    Description: Directory ID
    Type: String
    Default: ''

  ComputeNodeSubnets:
    Description: List of subnets for compute nodes, spread across different AZs
    Type: List<AWS::EC2::Subnet::Id>

  LambdaLdapSecurityGroup:
    Description: Security group for Lambda to access LDAP
    Type: AWS::EC2::SecurityGroup::Id

  ADReadOnlySecret:
    Type: String
    Description: ARN for ReadOnly Secret
    NoEcho: true

  ADSearchBase:
    Type: String
    Description: Search base for LDAP
    Default: "OU=Users,OU=example,DC=example,DC=com"

Resources:
  CreateUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: Lambda function to create AD users and set up certificates
      Timeout: 300
      MemorySize: 128
      Role:
        Fn::GetAtt: [CreateUserLambdaRole, Arn]
      VpcConfig:
        SubnetIds: !Ref ComputeNodeSubnets
        SecurityGroupIds:
          - !Ref LambdaLdapSecurityGroup

  CreateUser:
    Type: Custom::CreateUser
    Properties:
      ServiceToken: !GetAtt CreateUserLambda.Arn
      DirectoryDomain: !Ref DirectoryDomain
      DnsIp1: !Ref DnsIp1
      DnsIp2: !Ref DnsIp2
      DirectoryId: !Ref DirectoryId
      AdminSecretArn: !Ref AdminSecretArn
      DomainCertificateSecretArn: !Ref DomainCertificateSecretArn
      DomainPrivateKeySecretArn: !Ref DomainPrivateKeySecretArn
      SearchBase: !Ref ADSearchBase

  CreateUserLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      Policies:
        - PolicyName: LambdaDSandSecretPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ds:CreateUser
                  - ds:ResetUserPassword
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                Resource: "*"
        - PolicyName: SFNXDeployWorkflowDefinitionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                Resource: "*"

Outputs:
  CreateUserLambdaArn:
    Description: "ARN of the CreateUser Lambda function"
    Value: !GetAtt CreateUserLambda.Arn
